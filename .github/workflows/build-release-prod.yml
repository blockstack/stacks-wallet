name: Build/release production

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
        include:
          - os: macos-latest
            NPM_COMMAND: mac

          - os: ubuntu-20.04
            NPM_COMMAND: linux

          - os: windows-latest
            NPM_COMMAND: win

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run ID ${{ github.run_id }}
        run: echo "${{ github.run_id }}"

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Variables
        id: vars
        run: |
          echo "::set-output name=version::$(cat package.json | jq -r .version)"
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=pull_request_id::$(echo $GITHUB_REF)"

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Install packages
        run: yarn

      - name: Build releases
        run: ./node_modules/.bin/cross-env yarn package-${{ matrix.NPM_COMMAND }}
        env:
          SHA: ${{ github.event.pull_request.head.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ steps.vars.outputs.pull_request_id }}
          BRANCH_NAME: ${{ steps.vars.outputs.branch_name }}

      - uses: actions/upload-artifact@v2
        name: Windows upload
        if: matrix.os == 'windows-latest'
        with:
          name: stacks-wallet-prod-${{ steps.vars.outputs.version }}-windows
          path: |
            release/**/*.exe
            release/**/*.msi

      - uses: actions/upload-artifact@v2
        name: MacOS upload
        if: matrix.os == 'macos-latest'
        with:
          name: stacks-wallet-prod-${{ steps.vars.outputs.version }}-macos
          path: release/**/*.dmg

      - uses: actions/upload-artifact@v2
        name: Linux upload
        if: matrix.os == 'ubuntu-20.04'
        with:
          name: stacks-wallet-prod-${{ steps.vars.outputs.version }}-linux
          path: |
            release/**/*.deb
            release/**/*.rpm

  release:
    runs-on: ubuntu-20.04

    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Run ID ${{ github.run_id }}
        run: echo "${{ github.run_id }}"

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.0
        id: semantic
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.workflow }}
        with:
          # These plugins aren't packaged with semantic-release by default. So specify them here to ensure they get installed during this GH Action
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            semantic-release-slack-bot
            @semantic-release/exec

      - name: Output Semantic release variables
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
          echo ${{ steps.semantic.outputs.new_release_channel }}
          echo ${{ steps.semantic.outputs.new_release_notes }}

      - uses: actions/download-artifact@v2
        with:
          path: release/

      - run: ls -la release

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.semantic.outputs.release-version }}
      #     release_name: Release ${{ steps.semantic.outputs.release-version }}
      #     draft: false
      #     prerelease: true
      #     body: |
      #       **stacks-wallet-4.0.0-beta.8.msi**
      #       `${{ hashFiles('./release/stacks-wallet-prod-4.0.0-beta.8-windows/stacks-wallet-4.0.0-beta.8.msi') }}`

      #       **stacks-wallet-4.0.0-beta.8.dmg**
      #       `${{ hashFiles('./release/stacks-wallet-prod-4.0.0-beta.8-macos/stacks-wallet-4.0.0-beta.8.dmg') }}`

      #       **stacks-wallet-4.0.0-beta.8.rpm**
      #       `${{ hashFiles('./release/stacks-wallet-prod-4.0.0-beta.8-linux/stacks-wallet-4.0.0-beta.8.rpm') }}`

      #       **stacks-wallet-4.0.0-beta.8.deb**
      #       `${{ hashFiles('./release/stacks-wallet-prod-4.0.0-beta.8-linux/stacks-wallet-4.0.0-beta.8.deb') }}`

      - name: List files
        run: ls -R .

      - name: Upload .msi
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/stacks-wallet-prod-4.0.0-beta.8-windows/stacks-wallet-4.0.0-beta.8.msi
          asset_name: stacks-wallet-4.0.0-beta.8.msi
          asset_content_type: application/octet-stream

      - name: Upload .dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/stacks-wallet-prod-4.0.0-beta.8-macos/stacks-wallet-4.0.0-beta.8.dmg
          asset_name: stacks-wallet-4.0.0-beta.8.dmg
          asset_content_type: application/octet-stream

      - name: Upload .rpm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/stacks-wallet-prod-4.0.0-beta.8-linux/stacks-wallet-4.0.0-beta.8.rpm
          asset_name: stacks-wallet-4.0.0-beta.8.rpm
          asset_content_type: application/octet-stream

      - name: Upload .deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/stacks-wallet-prod-4.0.0-beta.8-linux/stacks-wallet-4.0.0-beta.8.deb
          asset_name: stacks-wallet-4.0.0-beta.8.deb
          asset_content_type: application/octet-stream

      # - name: Discord notification
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      #   uses: Ilshidur/action-discord@master
      #   with:
      #     args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'
